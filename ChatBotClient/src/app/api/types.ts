/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/Chat/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a message to the chatbot and receive a streaming response */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The chat message request containing content and optional conversation ID */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ChatMessageRequest"];
                    "text/json": components["schemas"]["ChatMessageRequest"];
                    "application/*+json": components["schemas"]["ChatMessageRequest"];
                };
            };
            responses: {
                /** @description Successful streaming response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Chat/conversations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve conversation history with all messages */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The conversation ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Conversation found and returned */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetConversationHistoryResult"];
                        "application/json": components["schemas"]["GetConversationHistoryResult"];
                        "text/json": components["schemas"]["GetConversationHistoryResult"];
                    };
                };
                /** @description Conversation not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Chat/messages/{id}/rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the rating for a specific message */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The message ID */
                    id: number;
                };
                cookie?: never;
            };
            /** @description Rating request (1 for thumbs up, -1 for thumbs down, null to remove rating) */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateMessageRatingRequest"];
                    "text/json": components["schemas"]["UpdateMessageRatingRequest"];
                    "application/*+json": components["schemas"]["UpdateMessageRatingRequest"];
                };
            };
            responses: {
                /** @description Rating updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid rating value */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Message not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Chat/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of recent conversations */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of conversations to return (default: 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Conversations retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetConversationListResult"];
                        "application/json": components["schemas"]["GetConversationListResult"];
                        "text/json": components["schemas"]["GetConversationListResult"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ChatMessageRequest: {
            content: string;
            /** Format: int32 */
            conversationId?: number | null;
        };
        ChatMessageResult: {
            /** Format: int32 */
            id?: number;
            content?: string | null;
            role?: components["schemas"]["MessageRole"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: int32 */
            rating?: number | null;
        };
        ConversationSummary: {
            /** Format: int32 */
            id?: number;
            title?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string | null;
            /** Format: int32 */
            messageCount?: number;
            lastMessage?: string | null;
        };
        GetConversationHistoryResult: {
            /** Format: int32 */
            id?: number;
            title?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string | null;
            messages?: components["schemas"]["ChatMessageResult"][] | null;
        };
        GetConversationListResult: {
            conversations?: components["schemas"]["ConversationSummary"][] | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        MessageRole: 0 | 1;
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        UpdateMessageRatingRequest: {
            /** Format: int32 */
            rating?: number | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
